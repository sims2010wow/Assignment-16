#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <ctype.h>
#include <string.h>


struct structure_type1    
{  //A structure type is defined that has categories for the size of the matrix (row and col) and the matrix
	int size[2];
	float array[30][30];
};


struct structure_type1 loader(void);   //first a
char choice(void);          //function b
struct structure_type1 add(struct structure_type1 data1, struct structure_type1 data2);       //function c
											//function d
struct structure_type1 multiply(struct structure_type1 data1, struct structure_type1 data2);	//function e
struct structure_type1 multiply_element(struct structure_type1 data1, struct structure_type1 data2); //function f
void display(struct structure_type1 data1, struct structure_type1 data2, struct structure_type1 data3,char will); //function g


int main(void) {
	struct structure_type1 data1,data2,data3;
	char will;
	data1=loader();  //load first matrix
	data2 = loader(); //load second matrix
	will=choice();  //user choice of operation 
	switch (will)
	{
	case 'A':
		data3=add(data1,data2);
		break;
	case 'S':
		break;
	case 'M':
		data3=multiply(data1, data2);
		break;
	case 'E':
		break;
	case 'Q':
		break;
	}
	
	display(data1, data2, data3, will);
	printf("\n");
	system("pause");
}

struct structure_type1 loader(void) {       //function a
	struct structure_type1 data;  //this structure type is given to the varible data
	FILE *file;
	char name[30];
	int i,j;
	printf("Enter the name of the data to load: ");
	scanf(" %s", &name);     //name of file set to variable "name"
	file = fopen(name,"r");  //pointer uses "name" given by user
	fscanf(file, "%d %d",&data.size[0], &data.size[1]);     //row and cols scaned and assigned to data.size[]

	for (j = 0; j < data.size[0]; j++) {
		for (i = 0; i < data.size[1]; i++) {        //scan out the matrix into data.array[][]
			fscanf(file, "%f", &data.array[j][i]);
		}
	}
	fclose(file);
	return data;
}

char choice(void) { //function b
	int test;
	char will;
	//menu for user
	printf("\n		Enter A to add two matrices\n\
		Enter S to subtract two matrices\n\
		Enter M to multiply two matrices\n\
		Enter E to multiply the element by elements of two matrices\n\
		Enter Q to quit\n\n");
	do   //user choice with error check 
	{
		printf("Please enter a choice: ");
		scanf(" %c", &will);
		will = toupper(will);
		test = 0;
		switch (will)
		{
		case 'A':
			break;
		case 'S':
			break;
		case 'M':
			break;
		case 'E':
			break;
		case 'Q':
			printf("Quit");
			break;
		default:
			printf("Bad input");
			test = 1337;   //if test=1337 then loop do while untill good input
		}
	} while (test == 1337);
	return will;
}

struct structure_type1 add(struct structure_type1 data1, struct structure_type1 data2) {       //function c
	struct structure_type1 data3;
	return data1;
}


struct structure_type1 multiply(struct structure_type1 data1, struct structure_type1 data2) { //function e
	struct structure_type1 data3;  //result is data3
	int k,q,g;
	float sum=0;
	//cols 1 must = row 2
	if (data1.size[1] != data2.size[0]) {
		printf("\nMatrix Dimensions Do Not Allow Multiplication"); //if cols1 != rows2 then can't multiply
	}
	else{
		data3.size[0] = data1.size[0];      //if matrixcies can be multiplied we define the size of the answer
		data3.size[1] = data2.size[1];
	}

	for (q = 0; q < data1.size[0]; q++) {     //with these loops we define the result term by term
	for (g = 0; g < data2.size[1]; g++) {
			for (k = 0; k < data1.size[1]; k++) {
				sum = sum + data1.array[q][k] * data2.array[k][g];
			}
			data3.array[q][g] = sum;
			sum = 0;

	}
	g = 0;
	}
		
	return data3;
}

void display(struct structure_type1 data1, struct structure_type1 data2, struct structure_type1 data3, char will) { //function g
	char operation[15];
	int i,j;
	switch (will) //which operation was used?
	{
	case 'A':
		printf("Add matrices");
		break;
	case 'S':
		printf("Subtract matrices");
		break;
	case 'M':
		strcpy(operation, "multiply");
		break;
	case 'E':
		printf("Multiply element by matrices");
	}

	//print matrix 1
	printf("\nThe first matrix is: \n");
	for (i = 0; i < data1.size[0]; i++) {
		for (j = 0; j < data1.size[1]; j++) {
			printf("%5.3f\t", data1.array[i][j]);
		}
		printf("\n");
	}

	//print matrix 2
	printf("\nThe second matrix is: \n");
	for (i = 0; i < data2.size[0]; i++) {
		for (j = 0; j < data2.size[1]; j++) {
			printf("%5.3f\t", data2.array[i][j]);
		}
		printf("\n");
	}

	//state operation and print resulting matrix
	printf("\nYou chose the operation of %s. The resulting matrix is: \n",operation);
	for (i = 0; i < data3.size[0]; i++) {
		for (j = 0; j < data3.size[1]; j++) {
			printf("%5.3f\t", data3.array[i][j]);
		}
		printf("\n");
	}
}
